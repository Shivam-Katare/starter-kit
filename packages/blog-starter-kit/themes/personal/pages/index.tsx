import { addPublicationJsonLd } from '@starter-kit/utils/seo/addPublicationJsonLd';
import { getAutogeneratedPublicationOG } from '@starter-kit/utils/social/og';
import request from 'graphql-request';
import { GetStaticProps } from 'next';
import Head from 'next/head';
import { useState } from 'react';
import { Container } from '../components/container';
import { AppProvider } from '../components/contexts/appContext';
import { Footer } from '../components/footer';
import { Layout } from '../components/layout';
import {
	MorePostsByPublicationDocument,
	MorePostsByPublicationQuery,
	MorePostsByPublicationQueryVariables,
	PageInfoFragment,
	PostFragment,
	PostsByPublicationDocument,
	PostsByPublicationQuery,
	PostsByPublicationQueryVariables,
	PublicationFragment,
} from '../generated/graphql';
import { Button, Tag } from 'antd';
import Gallery from '../components/gallery';
import ProjectCard from '../components/cards';
import SlantingCards from '../components/slanting-cards';
import { PROJECT, WINNING_PROJECT } from '../lib/constants/constant';

const GQL_ENDPOINT = process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT;

type Props = {
	publication: PublicationFragment;
	initialPosts: PostFragment[];
	initialPageInfo: PageInfoFragment;
};

export default function Index({ publication, initialPosts, initialPageInfo }: Props) {
	const [posts, setPosts] = useState<PostFragment[]>(initialPosts);
	const [pageInfo, setPageInfo] = useState<Props['initialPageInfo']>(initialPageInfo);
	const [loadedMore, setLoadedMore] = useState(false);

	const loadMore = async () => {
		const data = await request<MorePostsByPublicationQuery, MorePostsByPublicationQueryVariables>(
			GQL_ENDPOINT,
			MorePostsByPublicationDocument,
			{
				first: 20,
				host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
				after: pageInfo.endCursor,
			},
		);
		if (!data.publication) {
			return;
		}
		const newPosts = data.publication.posts.edges.map((edge) => edge.node);
		setPosts([...posts, ...newPosts]);
		setPageInfo(data.publication.posts.pageInfo);
		setLoadedMore(true);
	};

	return (
		<AppProvider publication={publication}>
			<Layout>
				<Head>
					<title>{publication.title}</title>
					<meta
						name="description"
						content={
							publication.descriptionSEO || publication.title || `${publication.author.name}'s Blog`
						}
					/>
					<meta property="twitter:card" content="summary_large_image" />
					<meta property="twitter:title" content={publication.displayTitle || publication.title || 'Hashnode Blog Starter Kit'} />
					<meta property="twitter:description" content={publication.descriptionSEO || publication.title || `${publication.author.name}'s Blog`} />
					<meta
						property="og:image"
						content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
					/>
					<meta
						property="twitter:image"
						content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
					/>
					<script
						type="application/ld+json"
						dangerouslySetInnerHTML={{
							__html: JSON.stringify(addPublicationJsonLd(publication)),
						}}
					/>
				</Head>
				<Container className="mx-auto flex max-w-3xl flex-col items-stretch gap-10 px-5 py-10">

					<h1 className='text-[20px] font-bold font-[monospace]'>Hi, I'm Shivam ðŸ‘‹</h1>
					<div>


						<p>I am a frontend developer and technical writer who loves being a part of the open-source community.
							I work at <a href="https://triallies.com/" target='_blank'><Tag className="mr-2" color='volcano'>Triallies LLC</Tag></a>as a frontend developer,
							where I enjoy collaborating with and learning from my colleagues. I am also a contributor at <a href="" target='_blank'><Tag className='mr-2' color='cyan'>ReactPlay</Tag></a> and have worked with various communities and organizations. Check out about my work <a href="/projects" className='text-blue-500'>here</a>.
						</p>
					</div>
					<Gallery />

					<div className='text-center'>
						I write about web development, including JavaScript, React, Next.js, Tailwind CSS, and more.
						Also, I share my experiences as a developer and the latest tech industry trends.
					</div>

					<h1 className='text-center font-mono text-[30px]'>Projects</h1>

					<div className='grid justify-items-center md:grid-cols-2 gap-[80px] p-[22px] bg-[#c8c8c8] rounded-[15px]'>
						{PROJECT.map((project) => (
							<ProjectCard key={project.id} project={project} />
						))}
						<Button type='primary' size='large' className='w-full'>Check out more projects</Button>
					</div>

					<div className='text-center'>
						<p>
							I participate in hackathons and writeathons to improve my skills, learn new technologies, and connect with other developers. Below are some of my winning projects and articles.
						</p>
					</div>

					{WINNING_PROJECT.map((project) => (
						<SlantingCards key={project.title} title={project.title} description={project.description} link={project.link} image={project.image} />
					))}
					<Footer />
				</Container>
			</Layout>
		</AppProvider>
	);
}

export const getStaticProps: GetStaticProps<Props> = async () => {
	const data = await request<PostsByPublicationQuery, PostsByPublicationQueryVariables>(
		GQL_ENDPOINT,
		PostsByPublicationDocument,
		{
			first: 20,
			host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
		},
	);

	const publication = data.publication;
	if (!publication) {
		return {
			notFound: true,
		};
	}
	const initialPosts = (publication.posts.edges ?? []).map((edge) => edge.node);

	return {
		props: {
			publication,
			initialPosts,
			initialPageInfo: publication.posts.pageInfo,
		},
		revalidate: 1,
	};
};
